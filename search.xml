<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git命令基础篇]]></title>
    <url>%2F2019%2F09%2F02%2Fgit%E5%91%BD%E4%BB%A4%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[git是一款开源分布式管理控制系统，可以方便管理储存代码，托管你的代码，支持代码回滚，即回到过去git安装git安装地址 使用前配置配置用户信息与邮箱 git config –global user.name “你的账号”git config –global user.email “你的邮箱” git工作流查看用户配置信息 git config –list 创建本地仓库 git init 创建文件夹 mkdir 文件夹名 创建文件 touch 文件名.html 删除文件 rm -rf 文件名 修改文件名 git mv file newfile (例如将a.txt修改为b.txt 命令: git mv a.txt b.txt) 提交代码到远端的4个步骤：查看文件状态（是否被提交，可省略） git status 添加文件到暂存区 git add 文件名 git add . 表示添加当前文件下所有文件 取消暂存区文件 git reset HEAD 文件名 填写提交信息 git commit -m “提交信息”跳过git add流程，自动把跟踪的文件全部提交git commit -a -m ‘added new benchmarks’ 将本地仓库推送到远端： git push 本地与远端同步： git pull 分支管理创建分支： git branch 分支名 切换分支： git checkout 分支名 创建并切换分支： git checkout -b 分支 （即创建分支与切换分支合并成一条命令） 分支合并： git merge 分支名 删除分支： git branch -d 分支名]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用CMD满速下载百度云]]></title>
    <url>%2F2019%2F08%2F07%2F%E4%BD%BF%E7%94%A8CMD%E6%BB%A1%E9%80%9F%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E4%BA%91%2F</url>
    <content type="text"><![CDATA[工具准备 windows 10电脑 下载工具：baidupcs-go win10打开CDM快捷键 win+R后输入CMD回车 环境配置 桌面右击我的电脑→属性→高级系统设置→环境变量 在系统变量中选择Path变量→编辑→新建→输入你的BaiduPCS-Go的存放目录，注意是存放目录，例如我的是 D:\BaiduPCS-Go-v3.5.6-windows-x64，最后依次确认这样才可以使用CMD命令快速打开baidupcs-go 使用教程登录 配置好环境变量后，打开cmd 输入命令：baidupcs-go回车 登录你的百度网盘账号 输入命令 login回车依次输入账户密码，注意CMD中输入密码是不会显示出来的（哪怕是*号也不会显示）。 复制路径在文件管理器中粘贴打开 选择验证方式文件下载 列出当前位置所有文件 输入命令 ls 列出当前位置所有文件 选择目录（选择文件夹） cd 目录（只要输入前几个字按tab键就可以自动补全目录） 下载文件 d 文件名 总结至此，基本使用教程已经讲完了，也可以登录后输入命令‘help’查看命令集,如有其它问题前往 https://github.com/iikira/BaiduPCS-Go以获取更多帮助信息!前往 https://github.com/iikira/BaiduPCS-Go/releases 以获取程序更新信息!]]></content>
      <tags>
        <tag>-百度云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[winform实现B窗体刷新A窗体（子窗体刷新父窗体）]]></title>
    <url>%2F2019%2F08%2F02%2Fwinform%E5%AE%9E%E7%8E%B0A%E7%AA%97%E4%BD%93%E5%88%B7%E6%96%B0B%E7%AA%97%E4%BD%93%2F</url>
    <content type="text"><![CDATA[前言最近博主在做项目的时候遇到需要实现A窗体刷新B窗体的功能，比如从A窗体中点击登录按钮弹出B窗体的登录界面，如果用户登录成功则自动关闭B窗体，A窗体显示用户昵称；当用户关闭登录界面时，什么都不改变。 效果流程 在A窗体中当用户点击登录，弹出B窗体登录界面，如果登录成功，则把A窗体用户名改成用户在B窗体输入的用户名 用户输入账户后，把账户传到A窗体中 解决方案实现窗体间的传值 重载A窗体中的构造方法，并定义一个string类型的全局变量，注意：必须加static关键字，否则不能传值 1234567891011121314//系统自动生成的构造函数 public Form1() &#123; InitializeComponent(); &#125; //定义一个string类型的全局变量 private static string UserName = ""; //重载构造函数，设置一个string类型的形参，用来接收从B窗体传来的值 public Form1(string str) &#123; //把传过来的参数赋值给UserName UserName = str; &#125; 在A窗体中定义一个方法，把要刷新的部分写到这个方法里面 12345public void ShuaXin()&#123; //吧用户名标签文本改成用户传过来的值 label1.Text = UserName;&#125; 在A窗体里点击触发B窗体的按钮里的代码如下 123456private void button1_Click(object sender, EventArgs e)&#123; Login login = new Login(); login.Owner = this; login.Show();&#125; 在B窗体登录按钮单击事件的代码如下 1234567private void button1_Click(object sender, EventArgs e)&#123; Form1 form1 = new Form1(textBox1.Text);//把用户输入的账户传到我们刚刚设置好的构造函数里 form1 = (Form1)Owner; form1.ShuaXin(); Close();&#125; 这样就可以实现我们的功能啦。]]></content>
  </entry>
  <entry>
    <title><![CDATA[ADO.NET连接数据库(DBHelper类)]]></title>
    <url>%2F2019%2F07%2F28%2FADO.NET%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93(DBHelper%E7%B1%BB)%2F</url>
    <content type="text"><![CDATA[ADO.NET概述ADO.NET是一种数据访问技术，使得应用程序可以连接到数据存储，并以各种方式操作存储在其中的数据。该技术基于.NET Framework，与.NET Framework类库的其余部分高度集成。ADO.NET API的设计，使得可以从所有面向.NET Framework的语言中使用该API，如Visual Basic、C#、J#、和Visual C++。ADO.NET软件栈包含两个主要部分：提供者和服务。ADO.NET的“提供者”是一些组件，这些组件知道如何与特定的数据存储设施交互（例如，有一个提供者与SQL Server交互，另一个提供者与Oracle数据库交互）。所有的提供者都向外提供一个统一的API接口，ADO.NET软件栈中的其他层在此API之上建立。ADO.NET还包括基于提供者而建立的一些服务，设计这些服务的目的，是为了方便编写应用程序。其中一个服务是内存中的缓存（in-memory cache），缓存保存了数据的关系形式，并执行修改跟踪和约束验证等功能；该服务通过ADO.NET DataSet接口提供，包括一些与提供者层进行交互的组件。 ADO.NET数据库连接方式分为两种 windows身份验证 server=服务器名;database=数据库名;integrated security=true sql Server身份验证 server=服务器名;database=数据库名;uid=用户名;pwd=密码 ADO.NET五大对象 Connection(数据库连接对象) Command(执行SQL语句，曾删改命令) DataAdapte(执行SQL查询语句，断开式查询) DataReader(执行SQL语句，非断开式查询) DataSet(数据集) 引入名称空间 using System.Data.SqlClient; using System.Data; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293using System;using System.Data.SqlClient;using System.Data;namespace CinemaTicketSystem&#123; class DBHelper &#123; //创建链接数据库字符串 private static string ConnStr = "server=.;database=DarkNet;integrated security=true"; //创建链接数据库对象 private static SqlConnection Conn = new SqlConnection(ConnStr);; /// &lt;summary&gt; /// 链接数据库 /// &lt;/summary&gt; private static void InitConnection() &#123; //判断数据库是否关闭，关闭则打开数据库 if (Conn.State == ConnectionState.Closed) &#123; Conn.Open(); &#125; //判断数据库是否处于中断状态，中断则先关闭数据库再打开数据库 if (Conn.State == ConnectionState.Broken) &#123; Conn.Close(); Conn.Open(); &#125; &#125; /// &lt;summary&gt; /// 断开试查询 /// &lt;/summary&gt; /// &lt;param name="sqlStr"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static DataTable GetDataTable(string sqlStr) &#123; InitConnection(); SqlDataAdapter sda = new SqlDataAdapter(sqlStr, Conn); DataTable td = new DataTable(); sda.Fill(td); Conn.Close(); return td; &#125; /// &lt;summary&gt; /// 非断开试查询 /// &lt;/summary&gt; /// &lt;param name="sqlStr"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static SqlDataReader GetDataReader(string sqlStr) &#123; InitConnection(); SqlCommand cmd = new SqlCommand(sqlStr, Conn); return cmd.ExecuteReader(CommandBehavior.CloseConnection); &#125; /// &lt;summary&gt; /// 增删改 /// &lt;/summary&gt; /// &lt;param name="sqlStr"&gt;sql语句&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static bool ExecuteNoneQuery(string sqlStr) &#123; InitConnection(); SqlCommand cmd = new SqlCommand(sqlStr, Conn); bool rel = cmd.ExecuteNonQuery() &gt; 0; Conn.Close(); return rel; &#125; /// &lt;summary&gt; /// 执行聚合函数 /// &lt;/summary&gt; /// &lt;param name="sqlStr"&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static object ExecuteScalar(string sqlStr) &#123; InitConnection(); SqlCommand cmd = new SqlCommand(sqlStr, Conn); object rel = cmd.ExecuteScalar(); Conn.Close(); return rel; &#125; &#125;&#125;]]></content>
      <tags>
        <tag>c# .net</tag>
      </tags>
  </entry>
</search>
